// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model User {
  id       String                @id
  name     String?
  email    String?               @unique
  admin    Boolean               @default(false)
  sessions Session[]
  requests RobotSessionRequest[]
}

enum RobotType {
  URSIM_CB3_3_15_8
}

model Robot {
  id           String         @id @default(uuid())
  name         String         @unique
  type         RobotType
  availability Availability[]
  sessions     RobotSession[]
  active       Boolean        @default(false)
}

model Availability {
  id      String   @id @default(uuid())
  robot   Robot    @relation(fields: [robotId], references: [id], onDelete: Cascade)
  robotId String
  start   DateTime
  end     DateTime
}

model RobotSession {
  id       String                @id @default(uuid())
  requests RobotSessionRequest[]
  robot    Robot                 @relation(fields: [robotId], references: [id], onDelete: Cascade)
  robotId  String
  start    DateTime
  end      DateTime
}

model RobotSessionRequest {
  session   RobotSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  status    RequestStatus @default(REQUESTED)

  @@unique([sessionId, userId])
}

enum RequestStatus {
  REQUESTED
  ACCEPTED
  REJECTED
  AVAILABLE
}
